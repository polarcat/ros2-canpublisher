#!/bin/sh
#
# Copyright (C) 2021 Aliaksei Katovich. All rights reserved.
#
# This source code is licensed under the BSD Zero Clause License found in
# the 0BSD file in the root directory of this source tree.

ifs=$IFS

if [ $# -ne 1 ]; then
	echo "Usage: $(basename $0) <dbc>"
	exit 1
fi

header_="car.h"
get_header2() { header_=${1}.h; }
get_header() { IFS='.'; get_header2 $@; IFS=$ifs; }
get_header $(basename "$@")

out_=$header_
echo "header: $out_"

##=============================================================================
# common helpers

scale_=0
get_scale2() { scale_=$2; }
get_scale() { IFS='('; get_scale2 $1; IFS=$ifs; }
offset_=0
get_offset2() { offset_=$1; }
get_offset() { IFS=')'; get_offset2 $2; IFS=$ifs; }

get_scale_offset()
{
	IFS=','; get_scale $1; IFS=$ifs
	IFS=','; get_offset $1; IFS=$ifs
}

signed_=0
lsb_=0
size_=0
get_size2() { size_=$1; }
get_size()
{
	case "$2" in
	*"0-") lsb_=0; signed_=1;;
	*"0+") lsb_=0; signed_=0;; # unsigned
	*"1-") lsb_=1; signed_=1;;
	*"1+") lsb_=1; signed_=0;; # unsigned
	esac
	IFS='@'
	get_size2 $2
	IFS=$ifs;
}
pos_=0
get_pos() { pos_=$1; }

get_pos_size()
{
	IFS='|'; get_size $1; IFS=$ifs
	IFS='|'; get_pos $1; IFS=$ifs
}

name_=''
get_name() { name_=$1; }

##=============================================================================
# begin header file

LC_TIME=C
cat > $out_ << EOF
// autogenerated $(date)
#include <float.h>
#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
#include "decode64.h"

EOF

##=============================================================================
# generate signal decode functions

decode_fn()
{
	printf "static float "
	printf "decode_$1(uint64_t data)\n{\n"
	printf "  return decode64($pos_, $size_, $scale_, $offset_, $lsb_, $signed_, data);\n"
	printf "}\n"
}

while read tag code name pos scale range units rest; do
	case "$tag" in
	BO_)
		IFS=':'; get_name $name; IFS=$ifs
		;;
	*SG_)
		get_pos_size $pos
		get_scale_offset $scale
		decode_fn "${name_}__$code" >> $out_
		;;
	esac
done < $1
echo >> $out_

##=============================================================================
# generate signals info

bracket_open=0
while read tag code name pos scale range units rest; do
	case "$tag" in
	BO_)
		IFS=':'; get_name $name; IFS=$ifs
		printf "static const struct can_signal ${name_}_signals[] = {\n" >> $out_
		;;
	*SG_)
		case $units in
		*[A-Za-z0-9]*) ;;
		*) units='"-"'
		esac
		printf "  { \"$code\", $units, decode_${name_}__$code },\n" >> $out_
		index=$((index + 1))
		bracket_open=1
		;;
	*)
		if [ $bracket_open = "1" ]; then
			printf "};\n\n" >> $out_
			bracket_open=0
		fi
		;;
	esac
done < $1

##=============================================================================
# generate topics

echo "static const struct can_object can_objects_[] = {" >> $out_

while read tag code name rest; do
	case "$tag" in
	BO_)
		IFS=':'; get_name $name; IFS=$ifs
		printf "  { $code, \"$name_\", ${name_}_signals,\n" >> $out_
		printf "   ARRAY_SIZE(${name_}_signals) },\n" >> $out_
		;;
	esac
done < $1
printf "};\n\n" >> $out_
